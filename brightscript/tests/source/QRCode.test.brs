function main(args as Object) as Object
	return roca(args).describe("QRCode", sub()
		m.it("should generate correct UTF8 text data", sub()
			sourceText = "http://www.example.com/ążśźęćńół"

			qrcode = createObject("roSGNode", "QRCode")
			qrcode.typeNumber = -1
			qrcode.errorCorrectionLevel = "M"
			qrcode.callFunc("addData", sourceText)
			qrcode.callFunc("make")

			moduleCount = qrcode.moduleCount
			m.assert.equal(moduleCount, 29, "module count is invalid")

			correctTextData1 = [
				"█████████████████████████████████",
				"██ ▄▄▄▄▄ █ ▄█▀▄██ ▀▄ ▄██ ▄▄▄▄▄ ██",
				"██ █   █ █▀ █▀▄█▀▀█▄▄ ▄█ █   █ ██",
				"██ █▄▄▄█ ███ ▀ █▄▀▄▄▀ ▀█ █▄▄▄█ ██",
				"██▄▄▄▄▄▄▄█ ▀▄█▄▀▄▀ █▄▀▄█▄▄▄▄▄▄▄██",
				"██▄█  ▀▄▄▄█▄▄█▀█▀▀▄█▀▀▀█ ▀▀▄█▄ ██",
				"██▀▀▄▀▄█▄█  ▄▄█▄ ▄█  ███ ▀█▀▄▄▀██",
				"██ ▄▀█▄▀▄  ▄▀▄ █ ▄▀▀█▀██▀██▄▄▀▀██",
				"██  █▀ ▄▄▀▀ ▀█    █▀▄ ▀█▄▀▄▄▄ ▄██",
				"██▄██ ▄▄▄▄▄█   ▀▄▄ ▀▀▄▄▄█▄▄█▀ ███",
				"██▄█▄██▄▄▄ █ █▄▄▀█▀███▄▀▄▄█▄ ████",
				"███▄▄██▄▄▄ ▀▀▄█ █▀ █ ▄ ▄▄▄   ▀▀██",
				"██ ▄▄▄▄▄ █ █ ▀█▄█ ▀  ▄ █▄█ ▄█ ▀██",
				"██ █   █ █▀▄▄ ▄▀ ▀▄█ █  ▄▄   ▄ ██",
				"██ █▄▄▄█ █▄█▄▀█ ▀ ▀ ██  █ █▀▄▀▄██",
				"██▄▄▄▄▄▄▄█▄▄█▄█▄███▄▄▄▄████▄█▄███",
				"▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀",].join(chr(10))

			correctTextData2 = [
				" ▄▄▄▄▄ █ ▄█▀▄██ ▀▄ ▄██ ▄▄▄▄▄ ",
				" █   █ █▀ █▀▄█▀▀█▄▄ ▄█ █   █ ",
				" █▄▄▄█ ███ ▀ █▄▀▄▄▀ ▀█ █▄▄▄█ ",
				"▄▄▄▄▄▄▄█ ▀▄█▄▀▄▀ █▄▀▄█▄▄▄▄▄▄▄",
				"▄█  ▀▄▄▄█▄▄█▀█▀▀▄█▀▀▀█ ▀▀▄█▄ ",
				"▀▀▄▀▄█▄█  ▄▄█▄ ▄█  ███ ▀█▀▄▄▀",
				" ▄▀█▄▀▄  ▄▀▄ █ ▄▀▀█▀██▀██▄▄▀▀",
				"  █▀ ▄▄▀▀ ▀█    █▀▄ ▀█▄▀▄▄▄ ▄",
				"▄██ ▄▄▄▄▄█   ▀▄▄ ▀▀▄▄▄█▄▄█▀ █",
				"▄█▄██▄▄▄ █ █▄▄▀█▀███▄▀▄▄█▄ ██",
				"█▄▄██▄▄▄ ▀▀▄█ █▀ █ ▄ ▄▄▄   ▀▀",
				" ▄▄▄▄▄ █ █ ▀█▄█ ▀  ▄ █▄█ ▄█ ▀",
				" █   █ █▀▄▄ ▄▀ ▀▄█ █  ▄▄   ▄ ",
				" █▄▄▄█ █▄█▄▀█ ▀ ▀ ██  █ █▀▄▀▄",
				"       ▀  ▀ ▀ ▀▀▀    ▀▀▀▀ ▀ ▀",].join(chr(10))

			correctTextData3 = [
				"██████████████████████████████████████████████████████████████████",
				"██████████████████████████████████████████████████████████████████",
				"████              ██    ████  ████  ██      ████              ████",
				"████  ██████████  ██  ████  ██████    ██  ██████  ██████████  ████",
				"████  ██      ██  ████  ████  ████████        ██  ██      ██  ████",
				"████  ██      ██  ██    ██  ████    ██████  ████  ██      ██  ████",
				"████  ██      ██  ██████  ██  ██  ██    ██  ████  ██      ██  ████",
				"████  ██████████  ██████      ████  ████      ██  ██████████  ████",
				"████              ██  ██  ██  ██  ██  ██  ██  ██              ████",
				"████████████████████    ██████  ██    ████  ██████████████████████",
				"████  ██    ██      ██    ██████████  ██████████  ████  ██    ████",
				"████████      ██████████████  ██    ████      ██      ██████  ████",
				"████████  ██  ██  ██        ██      ██    ██████  ██████    ██████",
				"████    ██  ████████    ████████  ████    ██████    ██  ████  ████",
				"████    ████  ██        ██    ██    ██████████████████    ████████",
				"████  ██  ████  ██    ██  ██  ██  ██    ██  ████  ████████    ████",
				"████    ████      ████  ████        ████    ████  ██          ████",
				"████    ██    ████        ██        ██  ██    ████  ██████  ██████",
				"████  ████            ██      ██      ████      ██    ████  ██████",
				"██████████  ████████████        ████      ██████████████    ██████",
				"████  ██  ████        ██  ██    ████████████  ██    ██    ████████",
				"████████████████████  ██  ██████  ██  ████████  ████████  ████████",
				"██████    ████        ████  ██  ████  ██                  ████████",
				"████████████████████      ████  ██    ██  ██  ██████          ████",
				"████              ██  ██  ████  ██  ██        ██  ██    ██  ██████",
				"████  ██████████  ██  ██    ██████        ██  ██████  ████    ████",
				"████  ██      ██  ████        ██  ██  ██  ██                  ████",
				"████  ██      ██  ██  ████  ██      ████  ██    ████      ██  ████",
				"████  ██      ██  ██  ██  ████  ██  ██  ████    ██  ████  ██  ████",
				"████  ██████████  ████████  ██          ████    ██  ██  ██  ██████",
				"████              ██    ██  ██  ██████        ████████  ██  ██████",
				"██████████████████████████████████████████████████████████████████",
				"██████████████████████████████████████████████████████████████████",].join(chr(10))

			printer = createObject("roSGNode", "QRPrinter")

			m.assert.equal(printer.callFunc("toString", qrcode, 1, 2), correctTextData1, "half-size print with margin is invalid")
			m.assert.equal(printer.callFunc("toString", qrcode, 1, 0), correctTextData2, "half-size print without margin is invalid")
			m.assert.equal(printer.callFunc("toString", qrcode, 2, 2), correctTextData3, "full-size print with margin is invalid")
		end sub)
	end sub)
end function